// Copyright 2024, The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by ./bindgen.sh using bindgen 0.70.1

// Allow non-conventional naming for imports from C/C++.
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(clippy::undocumented_unsafe_blocks)]
// Allow unused definitions
#![allow(dead_code)]
// Allow unused return values for buildtime tests
#![allow(unused_must_use)]

use zerocopy::{AsBytes, FromBytes, FromZeroes};

// Configure linkage for MacOS.
#[cfg(target_os = "macos")]
#[link(name = "IOKit", kind = "framework")]
#[link(name = "CoreFoundation", kind = "framework")]
extern "C" {}

pub const ZBI_BOARD_NAME_LEN: u64 = 32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_platform_id_t {
    pub vid: u32,
    pub pid: u32,
    pub board_name: [::core::ffi::c_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_board_info_t {
    pub revision: u32,
}
pub const ZBI_MAX_SMT: u64 = 4;
pub type zbi_topology_processor_flags_t = u16;
pub const ZBI_TOPOLOGY_PROCESSOR_FLAGS_PRIMARY: zbi_topology_processor_flags_t = 1;
pub const ZBI_TOPOLOGY_PROCESSOR_FLAGS_INTERRUPT: zbi_topology_processor_flags_t = 2;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_topology_arm64_info_t {
    pub cluster_1_id: u8,
    pub cluster_2_id: u8,
    pub cluster_3_id: u8,
    pub cpu_id: u8,
    pub gic_id: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_topology_x64_info_t {
    pub apic_ids: [u32; 4usize],
    pub apic_id_count: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_topology_riscv64_info_t {
    pub hart_id: u64,
    pub isa_strtab_index: u32,
    pub reserved: u32,
}
pub const ZBI_TOPOLOGY_ARCHITECTURE_INFO_ARM64: u64 = 1;
pub const ZBI_TOPOLOGY_ARCHITECTURE_INFO_X64: u64 = 2;
pub const ZBI_TOPOLOGY_ARCHITECTURE_INFO_RISCV64: u64 = 3;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct zbi_topology_architecture_info_t {
    pub discriminant: u64,
    pub __bindgen_anon_1: zbi_topology_architecture_info_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union zbi_topology_architecture_info_t__bindgen_ty_1 {
    pub arm64: zbi_topology_arm64_info_t,
    pub x64: zbi_topology_x64_info_t,
    pub riscv64: zbi_topology_riscv64_info_t,
}
impl Default for zbi_topology_architecture_info_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for zbi_topology_architecture_info_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "zbi_topology_architecture_info_t__bindgen_ty_1 {{ union }}")
    }
}
impl Default for zbi_topology_architecture_info_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for zbi_topology_architecture_info_t {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "zbi_topology_architecture_info_t {{ __bindgen_anon_1: {:?} }}",
            self.__bindgen_anon_1
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct zbi_topology_processor_t {
    pub architecture_info: zbi_topology_architecture_info_t,
    pub flags: zbi_topology_processor_flags_t,
    pub logical_ids: [u16; 4usize],
    pub logical_id_count: u8,
}
impl Default for zbi_topology_processor_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for zbi_topology_processor_t {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "zbi_topology_processor_t {{ architecture_info: {:?}, logical_ids: {:?} }}",
            self.architecture_info, self.logical_ids
        )
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_topology_cluster_t {
    pub performance_class: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_topology_cache_t {
    pub cache_id: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_topology_die_t {
    pub reserved: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_topology_socket_t {
    pub reserved: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_topology_numa_region_t {
    pub start: u64,
    pub size: u64,
}
pub const ZBI_TOPOLOGY_ENTITY_PROCESSOR: u64 = 1;
pub const ZBI_TOPOLOGY_ENTITY_CLUSTER: u64 = 2;
pub const ZBI_TOPOLOGY_ENTITY_CACHE: u64 = 3;
pub const ZBI_TOPOLOGY_ENTITY_DIE: u64 = 4;
pub const ZBI_TOPOLOGY_ENTITY_SOCKET: u64 = 5;
pub const ZBI_TOPOLOGY_ENTITY_NUMA_REGION: u64 = 6;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct zbi_topology_entity_t {
    pub discriminant: u64,
    pub __bindgen_anon_1: zbi_topology_entity_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union zbi_topology_entity_t__bindgen_ty_1 {
    pub processor: zbi_topology_processor_t,
    pub cluster: zbi_topology_cluster_t,
    pub cache: zbi_topology_cache_t,
    pub die: zbi_topology_die_t,
    pub socket: zbi_topology_socket_t,
    pub numa_region: zbi_topology_numa_region_t,
}
impl Default for zbi_topology_entity_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for zbi_topology_entity_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "zbi_topology_entity_t__bindgen_ty_1 {{ union }}")
    }
}
impl Default for zbi_topology_entity_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for zbi_topology_entity_t {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "zbi_topology_entity_t {{ __bindgen_anon_1: {:?} }}", self.__bindgen_anon_1)
    }
}
pub const ZBI_TOPOLOGY_NO_PARENT: u16 = 65535;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct zbi_topology_node_t {
    pub entity: zbi_topology_entity_t,
    pub parent_index: u16,
}
impl Default for zbi_topology_node_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for zbi_topology_node_t {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "zbi_topology_node_t {{ entity: {:?} }}", self.entity)
    }
}
pub type zbi_kernel_driver_t = u32;
pub const ZBI_KERNEL_DRIVER_ARM_PSCI: zbi_kernel_driver_t = 1229149008;
pub const ZBI_KERNEL_DRIVER_ARM_GIC_V2: zbi_kernel_driver_t = 843270471;
pub const ZBI_KERNEL_DRIVER_ARM_GIC_V3: zbi_kernel_driver_t = 860047687;
pub const ZBI_KERNEL_DRIVER_ARM_GENERIC_TIMER: zbi_kernel_driver_t = 1296651329;
pub const ZBI_KERNEL_DRIVER_PL011_UART: zbi_kernel_driver_t = 1429228624;
pub const ZBI_KERNEL_DRIVER_AMLOGIC_UART: zbi_kernel_driver_t = 1431063873;
pub const ZBI_KERNEL_DRIVER_AMLOGIC_HDCP: zbi_kernel_driver_t = 1212960065;
pub const ZBI_KERNEL_DRIVER_DW8250_UART: zbi_kernel_driver_t = 1146566741;
pub const ZBI_KERNEL_DRIVER_AMLOGIC_RNG_V1: zbi_kernel_driver_t = 1212960082;
pub const ZBI_KERNEL_DRIVER_AMLOGIC_RNG_V2: zbi_kernel_driver_t = 1380732225;
pub const ZBI_KERNEL_DRIVER_GENERIC32_WATCHDOG: zbi_kernel_driver_t = 842220631;
pub const ZBI_KERNEL_DRIVER_GENI_UART: zbi_kernel_driver_t = 1229866311;
pub const ZBI_KERNEL_DRIVER_I8250_PIO_UART: zbi_kernel_driver_t = 808792632;
pub const ZBI_KERNEL_DRIVER_I8250_MMIO32_UART: zbi_kernel_driver_t = 1295331896;
pub const ZBI_KERNEL_DRIVER_I8250_MMIO8_UART: zbi_kernel_driver_t = 1110782520;
pub const ZBI_KERNEL_DRIVER_MOTMOT_UART: zbi_kernel_driver_t = 1296913493;
pub const ZBI_KERNEL_DRIVER_MOTMOT_POWER: zbi_kernel_driver_t = 1296913488;
pub const ZBI_KERNEL_DRIVER_AS370_POWER: zbi_kernel_driver_t = 1345337139;
pub const ZBI_KERNEL_DRIVER_IMX_UART: zbi_kernel_driver_t = 1431850313;
pub const ZBI_KERNEL_DRIVER_RISCV_PLIC: zbi_kernel_driver_t = 1128877136;
pub const ZBI_KERNEL_DRIVER_RISCV_GENERIC_TIMER: zbi_kernel_driver_t = 1296651346;
pub const ZBI_KERNEL_DRIVER_PXA_UART: zbi_kernel_driver_t = 1347961173;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_dcfg_simple_t {
    pub mmio_phys: u64,
    pub irq: u32,
    pub flags: u32,
}
pub type zbi_kernel_driver_irq_flags_t = u32;
pub const ZBI_KERNEL_DRIVER_IRQ_FLAGS_EDGE_TRIGGERED: zbi_kernel_driver_irq_flags_t = 1;
pub const ZBI_KERNEL_DRIVER_IRQ_FLAGS_LEVEL_TRIGGERED: zbi_kernel_driver_irq_flags_t = 2;
pub const ZBI_KERNEL_DRIVER_IRQ_FLAGS_POLARITY_LOW: zbi_kernel_driver_irq_flags_t = 4;
pub const ZBI_KERNEL_DRIVER_IRQ_FLAGS_POLARITY_HIGH: zbi_kernel_driver_irq_flags_t = 8;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_dcfg_simple_pio_t {
    pub base: u16,
    pub reserved: u16,
    pub irq: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_dcfg_arm_psci_driver_t {
    pub use_hvc: u8,
    pub reserved: [u8; 7usize],
    pub shutdown_args: [u64; 3usize],
    pub reboot_args: [u64; 3usize],
    pub reboot_bootloader_args: [u64; 3usize],
    pub reboot_recovery_args: [u64; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_dcfg_arm_gic_v2_driver_t {
    pub mmio_phys: u64,
    pub msi_frame_phys: u64,
    pub gicd_offset: u64,
    pub gicc_offset: u64,
    pub gich_offset: u64,
    pub gicv_offset: u64,
    pub ipi_base: u32,
    pub optional: u8,
    pub use_msi: u8,
    pub reserved: u16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_dcfg_arm_gic_v3_driver_t {
    pub mmio_phys: u64,
    pub gicd_offset: u64,
    pub gicr_offset: u64,
    pub gicr_stride: u64,
    pub reserved0: u64,
    pub ipi_base: u32,
    pub optional: u8,
    pub reserved1: [u8; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_dcfg_arm_generic_timer_driver_t {
    pub irq_phys: u32,
    pub irq_virt: u32,
    pub irq_sphys: u32,
    pub freq_override: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_dcfg_amlogic_hdcp_driver_t {
    pub preset_phys: u64,
    pub hiu_phys: u64,
    pub hdmitx_phys: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_dcfg_amlogic_rng_driver_t {
    pub rng_data_phys: u64,
    pub rng_status_phys: u64,
    pub rng_refresh_interval_usec: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_dcfg_generic32_watchdog_action_t {
    pub addr: u64,
    pub clr_mask: u32,
    pub set_mask: u32,
}
pub type zbi_kernel_driver_generic32_watchdog_flags_t = u32;
pub const ZBI_KERNEL_DRIVER_GENERIC32_WATCHDOG_FLAGS_ENABLED:
    zbi_kernel_driver_generic32_watchdog_flags_t = 1;
pub const ZBI_KERNEL_DRIVER_GENERIC32_WATCHDOG_MIN_PERIOD: i64 = 1000000;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_dcfg_generic32_watchdog_t {
    pub pet_action: zbi_dcfg_generic32_watchdog_action_t,
    pub enable_action: zbi_dcfg_generic32_watchdog_action_t,
    pub disable_action: zbi_dcfg_generic32_watchdog_action_t,
    pub watchdog_period_nsec: i64,
    pub flags: zbi_kernel_driver_generic32_watchdog_flags_t,
    pub reserved: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_dcfg_riscv_plic_driver_t {
    pub mmio_phys: u64,
    pub num_irqs: u32,
    pub reserved: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_dcfg_riscv_generic_timer_driver_t {
    pub freq_hz: u32,
    pub reserved: u32,
}
pub type zbi_pixel_format_t = u32;
pub const ZBI_PIXEL_FORMAT_NONE: zbi_pixel_format_t = 0;
pub const ZBI_PIXEL_FORMAT_RGB_565: zbi_pixel_format_t = 131073;
pub const ZBI_PIXEL_FORMAT_RGB_332: zbi_pixel_format_t = 65538;
pub const ZBI_PIXEL_FORMAT_RGB_2220: zbi_pixel_format_t = 65539;
pub const ZBI_PIXEL_FORMAT_ARGB_8888: zbi_pixel_format_t = 262148;
pub const ZBI_PIXEL_FORMAT_RGB_X888: zbi_pixel_format_t = 262149;
pub const ZBI_PIXEL_FORMAT_MONO_8: zbi_pixel_format_t = 65543;
pub const ZBI_PIXEL_FORMAT_NV12: zbi_pixel_format_t = 65544;
pub const ZBI_PIXEL_FORMAT_I420: zbi_pixel_format_t = 65545;
pub const ZBI_PIXEL_FORMAT_RGB_888: zbi_pixel_format_t = 196617;
pub const ZBI_PIXEL_FORMAT_ABGR_8888: zbi_pixel_format_t = 262154;
pub const ZBI_PIXEL_FORMAT_BGR_888_X: zbi_pixel_format_t = 262155;
pub const ZBI_PIXEL_FORMAT_ARGB_2_10_10_10: zbi_pixel_format_t = 262156;
pub const ZBI_PIXEL_FORMAT_ABGR_2_10_10_10: zbi_pixel_format_t = 262157;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_swfb_t {
    pub base: u64,
    pub width: u32,
    pub height: u32,
    pub stride: u32,
    pub format: zbi_pixel_format_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_kernel_t {
    pub entry: u64,
    pub reserve_memory_size: u64,
}
pub type zbi_mem_type_t = u32;
pub const ZBI_MEM_TYPE_RAM: zbi_mem_type_t = 1;
pub const ZBI_MEM_TYPE_PERIPHERAL: zbi_mem_type_t = 2;
pub const ZBI_MEM_TYPE_RESERVED: zbi_mem_type_t = 3;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_mem_range_t {
    pub paddr: u64,
    pub length: u64,
    pub type_: zbi_mem_type_t,
    pub reserved: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_nvram_t {
    pub base: u64,
    pub length: u64,
}
pub const ZBI_PARTITION_NAME_LEN: u64 = 32;
pub const ZBI_PARTITION_GUID_LEN: u64 = 16;
pub type zbi_partition_guid_t = [u8; 16usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_partition_t {
    pub type_guid: zbi_partition_guid_t,
    pub uniq_guid: zbi_partition_guid_t,
    pub first_block: u64,
    pub last_block: u64,
    pub flags: u64,
    pub name: [::core::ffi::c_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct zbi_partition_map_t {
    pub block_count: u64,
    pub block_size: u64,
    pub partition_count: u32,
    pub reserved: u32,
    pub guid: zbi_partition_guid_t,
}
pub type zbi_hw_reboot_reason_t = u32;
pub const ZBI_HW_REBOOT_REASON_UNDEFINED: zbi_hw_reboot_reason_t = 0;
pub const ZBI_HW_REBOOT_REASON_COLD: zbi_hw_reboot_reason_t = 1;
pub const ZBI_HW_REBOOT_REASON_WARM: zbi_hw_reboot_reason_t = 2;
pub const ZBI_HW_REBOOT_REASON_BROWNOUT: zbi_hw_reboot_reason_t = 3;
pub const ZBI_HW_REBOOT_REASON_WATCHDOG: zbi_hw_reboot_reason_t = 4;
pub const ZBI_ALIGNMENT: u32 = 8;
pub const ZBI_TYPE_KERNEL_PREFIX: u32 = 5132875;
pub const ZBI_TYPE_KERNEL_MASK: u32 = 16777215;
pub const ZBI_TYPE_DRIVER_METADATA_PREFIX: u32 = 109;
pub const ZBI_TYPE_DRIVER_METADATA_MASK: u32 = 255;
pub type zbi_type_t = u32;
pub const ZBI_TYPE_CONTAINER: zbi_type_t = 1414483778;
pub const ZBI_TYPE_KERNEL_X64: zbi_type_t = 1280201291;
pub const ZBI_TYPE_KERNEL_ARM64: zbi_type_t = 944656971;
pub const ZBI_TYPE_KERNEL_RISCV64: zbi_type_t = 1447973451;
pub const ZBI_TYPE_DISCARD: zbi_type_t = 1346980691;
pub const ZBI_TYPE_STORAGE_RAMDISK: zbi_type_t = 1263748178;
pub const ZBI_TYPE_STORAGE_BOOTFS: zbi_type_t = 1112753730;
pub const ZBI_TYPE_STORAGE_KERNEL: zbi_type_t = 1381258059;
pub const ZBI_TYPE_STORAGE_BOOTFS_FACTORY: zbi_type_t = 1179862594;
pub const ZBI_TYPE_CMDLINE: zbi_type_t = 1279544643;
pub const ZBI_TYPE_CRASHLOG: zbi_type_t = 1297043266;
pub const ZBI_TYPE_NVRAM: zbi_type_t = 1280071246;
pub const ZBI_TYPE_PLATFORM_ID: zbi_type_t = 1145654352;
pub const ZBI_TYPE_DRV_BOARD_INFO: zbi_type_t = 1230193261;
pub const ZBI_TYPE_CPU_TOPOLOGY: zbi_type_t = 1129338163;
pub const ZBI_TYPE_MEM_CONFIG: zbi_type_t = 1129137485;
pub const ZBI_TYPE_KERNEL_DRIVER: zbi_type_t = 1448232011;
pub const ZBI_TYPE_ACPI_RSDP: zbi_type_t = 1346655058;
pub const ZBI_TYPE_SMBIOS: zbi_type_t = 1229081939;
pub const ZBI_TYPE_EFI_SYSTEM_TABLE: zbi_type_t = 1397311045;
pub const ZBI_TYPE_EFI_MEMORY_ATTRIBUTES_TABLE: zbi_type_t = 1413565765;
pub const ZBI_TYPE_FRAMEBUFFER: zbi_type_t = 1111906131;
pub const ZBI_TYPE_IMAGE_ARGS: zbi_type_t = 1196573001;
pub const ZBI_TYPE_BOOT_VERSION: zbi_type_t = 1397904962;
pub const ZBI_TYPE_DRV_MAC_ADDRESS: zbi_type_t = 1128353133;
pub const ZBI_TYPE_DRV_PARTITION_MAP: zbi_type_t = 1414680685;
pub const ZBI_TYPE_DRV_BOARD_PRIVATE: zbi_type_t = 1380926061;
pub const ZBI_TYPE_HW_REBOOT_REASON: zbi_type_t = 1112692552;
pub const ZBI_TYPE_SERIAL_NUMBER: zbi_type_t = 1313624659;
pub const ZBI_TYPE_BOOTLOADER_FILE: zbi_type_t = 1279677506;
pub const ZBI_TYPE_DEVICETREE: zbi_type_t = 3490578157;
pub const ZBI_TYPE_SECURE_ENTROPY: zbi_type_t = 1145979218;
pub const ZBI_TYPE_DEBUGDATA: zbi_type_t = 1145520708;
pub const ZBI_TYPE_RISCV64_ISA_STRTAB: zbi_type_t = 1095977302;
pub const ZBI_CONTAINER_MAGIC: u32 = 2257385446;
pub const ZBI_ITEM_MAGIC: u32 = 3044546345;
pub type zbi_flags_t = u32;
pub const ZBI_FLAGS_VERSION: zbi_flags_t = 65536;
pub const ZBI_FLAGS_CRC32: zbi_flags_t = 131072;
pub const ZBI_ITEM_NO_CRC32: u32 = 1250420950;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, FromBytes, AsBytes, FromZeroes)]
pub struct zbi_header_t {
    pub type_: zbi_type_t,
    pub length: u32,
    pub extra: u32,
    pub flags: zbi_flags_t,
    pub reserved0: u32,
    pub reserved1: u32,
    pub magic: u32,
    pub crc32: u32,
}
